#include "monocular-slam-node.hpp"
#include<opencv2/core/core.hpp>

using std::placeholders::_1;

MonocularSlamNode::MonocularSlamNode(ORB_SLAM3::System* pSLAM)
:   Node("ORB_SLAM3_ROS2")
{
    m_SLAM = pSLAM;
    // std::cout << "slam changed" << std::endl;

    // Initialize ROS2 client to call the image enhancement service in Python
    client_ = this->create_client<orbslam3_ros2::srv::EnhanceImage>("enhance_image");

    m_image_subscriber = this->create_subscription<ImageMsg>(
        "camera/image_raw",
        10,
        std::bind(&MonocularSlamNode::GrabImage, this, std::placeholders::_1));
    std::cout << "slam changed" << std::endl;
}

MonocularSlamNode::~MonocularSlamNode()
{
    // Stop all threads
    m_SLAM->Shutdown();

    // Save camera trajectory
    m_SLAM->SaveKeyFrameTrajectoryTUM("KeyFrameTrajectory.txt");
}

void MonocularSlamNode::GrabImage(const ImageMsg::SharedPtr msg)
{
    // Copy the ros image message to cv::Mat.
    try
    {
        m_cvImPtr = cv_bridge::toCvCopy(msg);
    }
    catch (cv_bridge::Exception& e)
    {
        RCLCPP_ERROR(this->get_logger(), "cv_bridge exception: %s", e.what());
        return;
    }

    if (client_->wait_for_service(std::chrono::seconds(1)))
    {
        auto request = std::make_shared<orbslam3_ros2::srv::EnhanceImage::Request>();
        request->input_image = *(m_cvImPtr->toImageMsg());

        auto future = client_->async_send_request(request);

        // Wait for the result (with timeout if necessary)
        if (rclcpp::spin_until_future_complete(this->get_node_base_interface(), future, std::chrono::seconds(2)) ==
            rclcpp::FutureReturnCode::SUCCESS)
        {
            auto response = future.get();
            // Convert back to cv::Mat
            cv_bridge::CvImagePtr enhanced_cv_ptr;
            try
            {
                enhanced_cv_ptr = cv_bridge::toCvCopy(response->enhanced_image, sensor_msgs::image_encodings::BGR8);
            }
            catch (cv_bridge::Exception& e)
            {
                RCLCPP_ERROR(this->get_logger(), "cv_bridge exception while converting response: %s", e.what());
                return;
            }

            // Use the enhanced image
            std::cout << "one enhanced frame has been received and processed" << std::endl;
            m_SLAM->TrackMonocular(enhanced_cv_ptr->image, Utility::StampToSec(msg->header.stamp));
            return;
        }
        else
        {
            RCLCPP_WARN(this->get_logger(), "Failed to receive response from enhancement service.");
        }
    }
    else
    {
        RCLCPP_WARN(this->get_logger(), "Service not available");
    }

    std::cout<<"one frame has been sent"<<std::endl;
    m_SLAM->TrackMonocular(m_cvImPtr->image, Utility::StampToSec(msg->header.stamp));
}
